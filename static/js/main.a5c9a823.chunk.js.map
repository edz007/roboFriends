{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/robots.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","props","robots","map","user","i","key","SearchBox","searchChange","onChange","type","placeholder","username","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a5c9a823.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({name, email, id}) => {\r\n    // const {name, email, id} = props;\r\n    return (\r\n     \r\n        <div className = 'bg-light-green dib br3 pa3 ma2 grow bw2 shadow'>\r\n            <img alt ='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = (props)=> {\r\n    const robots= props.robots;\r\n   // const cardArray = 1\r\n    return (\r\n        \r\n            robots.map((user,i) => {\r\n                return <Card key ={robots[i].id} id={robots[i].id} name ={robots[i].name} email={robots[i].email}/>\r\n            })\r\n        \r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div>\r\n            <input onChange={searchChange}\r\n            type=\"search\" className = \"pa3 ba b--green bg-lightest-blue\" placeholder =\"Search Robots\" /> \r\n            \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default SearchBox","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n\nexport default robots;","\r\nimport React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\nreturn (\r\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n        {props.children}\r\n    </div>\r\n)\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\ncomponentDidCatch(error, info) {\r\n    this.setState({hasError:true})\r\n}\r\nrender() {\r\n    if (this.state.hasError){\r\n        return <h1>Ooops.. Not good</h1>\r\n    }\r\n    return this.props.children \r\n}}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from \"../components/SearchBox\";\nimport robots from \"../components/robots\";\nimport Scroll from \"../components/Scroll\";\nimport './App.css';\nimport ErrorBoundry from \"../components/ErrorBoundary\"\n\n\n\nclass App extends React.Component{\n  constructor () {\n    super()\n    this.state = {\n      robots: robots,\n      searchfield: \" \"\n    }\n  }\n  \n  onSearchChange= (event) => {\n    \n    this.setState({searchfield: event.target.value})\n}\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response=> response.json())\n    .then (users => this.setState({ robots: users} ) )\n  }\n\n  render () {\n    const filteredRobots = this.state.robots.filter(robots =>{\n      return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n  })\n\n  if (this.state.robots.length === 0) {\n    return <h1>Loading...</h1>\n  } else {\n\n    return (\n      <div className=\"tc\">\n      <h1>RoboFriends </h1>\n      <SearchBox searchChange = {this.onSearchChange}/>\n      <Scroll>\n        <ErrorBoundry>\n          <CardList robots={filteredRobots} />\n       </ErrorBoundry>\n      </Scroll>\n      </div>\n    )\n  }\n  }\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\n\n// import App from './Hello';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\nReactDOM.render(<App /> ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below   . Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}